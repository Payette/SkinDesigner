
# By Santiago Garay
# SkinDataViewer

"""
Use this component to extract from a SkinGenerator solution overall panel Ids and their locations as well as a range of panel properties as breps.

    Args:
        _skinBayData:  A list with information on panel location on the scene generated by the SkinGenerator component.  
        _skinPanelData:  A list with information on panel types generated by the SkinGenerator component.  
        filterCustomPanel: A bolean that turns on/off the inclusion of custom sized panels in the data. By default filterCustomData is turned off (custom panels are included in the data)
        panelNameFilters: A list of strings that indicate the panel names that will be included in the output data. By default all the panels in the SkinGeneraotr solution are included.
        drawPanelElements: A boolean that turns on/off the generation of panel elements as separate lists of breps available in the geo outputs.
    Returns:
        skinIndices: A list representing a sequence of panel IDs indicatin the panel type used at each cell of the SkinGenrator solution. Cells are created from left to right and bottom to top of each skin surface or polysurface.
        panelGeo: A list of quad sufaces that represent the shape and location of the panels of the SkinGenerator solution.
        panelPoints: a list of corner points of the panels generated in the SkinGenerator solution.
        wallGeo: A list of Breps of the panels' walls created in the SkinGenerator solution (drawPanelElements must be turned on).
        windowGeo: A list of Breps of the panels' window glazing surface created in the SkinGenerator solution (drawPanelElements must be turned on).
        mullionGeo: A list of Breps of the panels' mullions created in the SkinGenerator solution (drawPanelElements must be turned on).
        shadingGeo: A list of Breps of the panels' sahding elements created in the SkinGenerator solution (drawPanelElements must be turned on).
        customGeo: A list of Breps of the panels' custom geometry created in the SkinGenerator solution (drawPanelElements must be turned on).
"""

ghenv.Component.Name = "SkinDesigner_SkinDataViewer"
ghenv.Component.NickName = 'SkinDataViewer'
ghenv.Component.Message = 'VER 0.0.20\nJul_13_2017'
ghenv.Component.Category = "SkinDesigner"
ghenv.Component.SubCategory = "04 | Display"


import Grasshopper.Kernel as gh
import rhinoscriptsyntax as rs
import Rhino
import scriptcontext as sc
#from types import *
#import random
import copy
#import math

SGLibPanel = sc.sticky["SGLib_Panel"]

#initialize
sc.doc = Rhino.RhinoDoc.ActiveDoc
rs.EnableRedraw(False)

warningData = []
panelGeo = []; panelPoints = []; skinIndices = []
wallGeo= []; windowGeo=[]; mullionGeo=[]; shadingGeo=[]; customGeo=[]

if _skinBayData == []: warningData.append("'_skinBayData' input data missing")
if _skinPanelData == []: warningData.append( "'_skinPanelData' input data missing")

if _skinBayData and _skinPanelData:
    #Flatten skin panels list (comes as grouped by each base panel and cutom created)
    skinPanelList = []
    for panelGroup in _skinPanelData:
        for panel in panelGroup: skinPanelList += [panel]
    
    nameList = []
    for panel in skinPanelList :
        panelName = panel[0].GetName()
        #check if is a custom panel and exclude if filter on
        if filterCustomPanel:
            if "-Width" in panelName or "-Height" in panelName:
                nameList.append(0); continue #add placeholder if filtered
        #check if panel name list inlcudes the panel
        filter = False
        if panelNameFilters :
            filter = True
            for nameFilter in panelNameFilters :
                if nameFilter in panelName: filter = False
        #add panel name to list or add a placelder if filtered        
        if not filter: nameList.append(panelName)
        else: nameList.append(0) 
        
    #Draw brep of panels 
    #bayData[0] holds each panel block corner point and panel name
    # in the order panel blocks were created as placed through skin
    bayData_Copy = copy.deepcopy(_skinBayData[0])
    
    for panel in bayData_Copy:
        panelName = panel[1]
        #check if the panel name has not been filtered
        if nameList.count(panelName):
            index = nameList.index(panelName) #get index based on name loc. in list
            p1, p2, p3, p4 = panel[0] #get corner points
            #create panel surface
            brep = Rhino.Geometry.Brep.CreateFromCornerPoints(p1,p2,p4,p3, sc.doc.ModelAbsoluteTolerance)
            panelGeo.append(brep)
            #store index of panels throughout skin
            skinIndices.append(index)
            panelPoints.extend([p1, p2, p4, p3])
            #tag panel id text at panel location
            #text = rs.AddText(str(index) , p1, fontHeight, font_style=fontStyle)
            
            #Draw Panels in scene
            if drawPanelElements == True:
                tmpPanel = skinPanelList[index][0]
                panelDef = SGLibPanel()
                panelDef.Copy(tmpPanel)
                panelDef.MorphPanel([p1,p2,p3,p4])
                panelDef.Draw()
                geoList =  panelDef.GetBreps("Wall")
                if geoList <> []:
                    for geo in geoList: wallGeo.append(geo.Duplicate())
                else: wallGeo.append(None)
                
                geoList =  panelDef.GetBreps("Window")
                if geoList <> []:
                    for geo in geoList: windowGeo.append(geo.Duplicate())
                else: windowGeo.append(None)
                
                geoList =  panelDef.GetBreps("Mullions")
                if geoList <> []:
                    for geo in geoList: mullionGeo.append(geo.Duplicate())
                else: mullionGeo.append(None)
                
                geoList =  panelDef.GetBreps("Shading")
                if geoList <> []:
                    for geo in geoList: shadingGeo.append(geo.Duplicate())
                else: shadingGeo.append(None)
                
                geoList =  panelDef.GetBreps("CustomGeometry")
                if geoList <> []:
                    for geo in geoList: customGeo.append(geo.Duplicate())
                else: customGeo.append(None)
                
            else:
                wallGeo.append(None)
                windowGeo.append(None)
                mullionGeo.append(None)
                shadingGeo.append(None)
                customGeo.append(None)
        else:
            skinIndices.append(None)
            panelGeo.append(None)
            wallGeo.append(None)
            windowGeo.append(None)
            mullionGeo.append(None)
            customGeo.append(None)

       
#Wrapup
rs.EnableRedraw(True)
sc.doc = ghdoc

if warningData <> []: 
    for warning in warningData: ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, str(warning))
    
print "Done"