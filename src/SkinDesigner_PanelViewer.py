
# By Santiago Garay
# Mock_up

"""
Use this component to display a panel or panel bay in the scene and/or generate grasshopper breps of the panel elements.

    Args:
        Panel_Bay: Panel object or Panel_Bay (list of Panels) generated by Panel components.
        drawGeometry: A boolean that turns on/off drawing of panel object in the scene.
        drawBreps: A boolean that turns on/off outputing grasshopper geometry versions of the panel object.
        _locPoint: A grasshoper Point object object to indicate with the start location in the scene to draw the panel.

    Returns:
        Breps: A list of Breps of the panel elements created when drawBreps is turned on.
"""

ghenv.Component.Name = "SkinDesigner_PanelViewer"
ghenv.Component.NickName = 'PanelViewer'
ghenv.Component.Message = 'VER 0.0.55\nAug_03_2017'
ghenv.Component.Category = "SkinDesigner"
ghenv.Component.SubCategory = "04 | Display"

import Grasshopper.Kernel as gh
import rhinoscriptsyntax as rs
import Rhino as rc
import scriptcontext as sc
#import sys
SGLibPanel = sc.sticky["SGLib_Panel"]

PANEL_TYPES_ID=str(ghenv.Component.InstanceGuid)
warningData = []

def DeleteMockup():
    
    if not sc.sticky["Mockup_Data" + PANEL_TYPES_ID] : return
        
    for panel in sc.sticky["Mockup_Data" + PANEL_TYPES_ID] :
        if isinstance(panel, SGLibPanel):
            panel.HideAll() #same as deleting all panel objects
    

#initialize
offsetX = 0; offsetY = 0; offsetZ = 0
sc.doc = rc.RhinoDoc.ActiveDoc
rs.EnableRedraw(False)


for i, panel in enumerate(Panel_Bay): 
    if not isinstance(panel, SGLibPanel): 
        warningData.append( "Invalid panel #" + str(i+1) + " in PanelBay input"); Panel_Bay[i] = None
try: 
    while True: Panel_Bay.remove(None)
except: pass
if Panel_Bay == []: warningData.append("'Panel_Bay' input data is missing") 
locP = None

if  type(_locPoint) == rc.Geometry.ArcCurve: 
    success, circle = _locPoint.TryGetCircle()
    locP = circle.Center
elif type(_locPoint) == rc.Geometry.Point3d : locP = _locPoint
else: warningData.append( "I need a circle or point for location")    

if locP: offsetX, offsetY, offsetZ = locP



Mockup_Bay = []


if "Mockup_Data"+PANEL_TYPES_ID not in sc.sticky : sc.sticky["Mockup_Data"+PANEL_TYPES_ID] = []

DeleteMockup()
    
if Panel_Bay <> []and Panel_Bay[0] and locP:

    for i in range(len(Panel_Bay)):
        arrBoxPoints = [[offsetX, offsetY, offsetZ],[offsetX + Panel_Bay[i].GetPanelProperty("PanelWidth"), offsetY, offsetZ],\
            [offsetX, offsetY, offsetZ+Panel_Bay[i].GetPanelProperty("PanelHeight")],\
            [offsetX + Panel_Bay[i].GetPanelProperty("PanelWidth"), offsetY, offsetZ+Panel_Bay[i].GetPanelProperty("PanelHeight")]]
        try:
            Mockup_Bay.append(SGLibPanel())
            Mockup_Bay[i].Copy(Panel_Bay[i])
            Mockup_Bay[i].RunConditionalDefinition()
            Mockup_Bay[i].MorphPanel(arrBoxPoints)
            Mockup_Bay[i].Draw(drawGeometry)
            if  drawBreps : Breps = Mockup_Bay[i].GetBreps()
        except Exception:
            DeleteMockup()
            raise
        offsetX = offsetX + Mockup_Bay[i].GetPanelProperty("PanelWidth")
    sc.sticky["Mockup_Data" + PANEL_TYPES_ID] = Mockup_Bay
else:
    DeleteMockup()
    
#Wrapup
rs.EnableRedraw(True)
sc.doc = ghdoc


if warningData <> []: 
    for warning in warningData: ghenv.Component.AddRuntimeMessage(gh.GH_RuntimeMessageLevel.Warning, str(warning))
print "done"